{"version":3,"sources":["components/MovieModule.js","components/Movies.js","App.js","serviceWorker.js","index.js"],"names":["MovieModule","getStyle","background","padding","borderBottom","textDecoration","props","movie","userRating","style","this","title","src","poster","alt","Component","Movies","arr","i","Object","entries","movies","id","push","map","key","App","state","window","topN","console","log","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAgCeA,E,2MA5BbC,SAAW,WACT,MAAO,CACHC,WAAY,UACZC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,MAAMC,YAAc,EAAI,YAAc,S,wEAKrE,OACE,yBAAKC,MAAQC,KAAKT,YAChB,2BAAKS,KAAKJ,MAAMC,MAAMI,OACtB,yBAAKC,IAAK,iCAAmCF,KAAKJ,MAAMC,MAAMM,OAAQC,IAAM,U,GAd1DC,aCyBXC,E,iLApBX,IAFA,IAAIC,EAAM,GACNC,EAAI,EACR,MAA2BC,OAAOC,QAAQV,KAAKJ,MAAMe,QAArD,eAA8D,CAAC,IAAD,0BACtDd,EAAQ,CACRe,GAAIJ,EACJP,MAHsD,KAItDE,OAJsD,MAM1DI,EAAIM,KAAKhB,GACTW,IAEJ,OAAOD,EAAIO,KAAI,SAACjB,GAAD,OACX,kBAAC,EAAD,CAAakB,IAAMlB,EAAMe,GAAKf,MAAQA,W,GAdzBQ,aCkBNW,G,iNAhBbC,MAAQ,CACNN,OAAQO,OAAOC,M,wEAKf,OADHC,QAAQC,IAAIH,OAAOC,MAEd,yBAAKG,UAAU,OACb,qEACA,8CACA,kBAAC,EAAD,CAAQX,OAASX,KAAKiB,MAAMN,c,GAXlBN,cCOEkB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"js/main.6d56e2b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MovieModule extends Component {\r\n  getStyle = () => {\r\n    return {\r\n        background: '#f4f4f4',\r\n        padding: '10px',\r\n        borderBottom: '1px #ccc dotted',\r\n        textDecoration: this.props.movie.userRating > -1 ? 'underline' : 'none'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={ this.getStyle() }>\r\n        <p>{ this.props.movie.title }</p>\r\n        <img src={\"http://image.tmdb.org/t/p/w300\" + this.props.movie.poster} alt = \"\"></img>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nMovieModule.propTypes = {\r\n    movie: PropTypes.object.isRequired\r\n}\r\n\r\nconst itemStyle = {\r\n    backgroundColor: '#f4f4f4'\r\n}\r\n\r\nexport default MovieModule;","import React, { Component } from 'react';\r\nimport MovieModule from './MovieModule';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Movies extends Component {\r\n  render() {\r\n    var arr = [];\r\n    var i = 0\r\n    for (const [key, value] of Object.entries(this.props.movies)) {\r\n        let movie = {\r\n            id: i,\r\n            title: key,\r\n            poster: value\r\n        }\r\n        arr.push(movie)\r\n        i++\r\n    }\r\n    return arr.map((movie) => (\r\n        <MovieModule key={ movie.id } movie={ movie } />\r\n    ));\r\n  }\r\n}\r\n\r\n// PropTypes\r\nMovies.propTypes = {\r\n    movies: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Movies;","import React, { Component } from 'react';\nimport Movies from './components/Movies'\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    movies: window.topN\n  }\n\n  render() {\n\tconsole.log(window.topN)\n    return (\n      <div className=\"App\">\n        <h1>Welcom to Movie Recommendation System</h1>\n        <h2>Popular Movies</h2>\n        <Movies movies={ this.state.movies } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}